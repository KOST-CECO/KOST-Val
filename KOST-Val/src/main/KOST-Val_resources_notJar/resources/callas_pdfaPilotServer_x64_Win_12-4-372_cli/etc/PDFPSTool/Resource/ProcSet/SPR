%!PS-Adobe-3.0 Resource-ProcSet
%%Title: Software RIP Problem Report information
%
% (c) Copyright 1993-1994 Adobe Systems Incorporated.
% All rights reserved.  All information contained herein is the property
% of Adobe Systems Incorporated or its Licensors, and are protected trade
% secrets and copyrights, and may be covered by U.S. and foreign patents
% or patents pending and/or mask works. Any reproduction or dissemination
% of any portion of this document or of software or other works derived
% from it is strictly forbidden unless prior written permission is
% obtained from Adobe Systems Incorporated.
%
% Patents Pending
%
% PostScript and Display PostScript are trademarks of Adobe Systems
% Incorporated which may be registered in certain jurisdictions.
%
%%EndComments

%%BeginResource: procset SPR 1 6
%
% The SPR procedure defined by this ProcSet may be used to write to a file
% or to the back-channel information that is helpful in diagnosing problems
% to be reported to Adobe using the Software RIP Problem Report.
%
% To minimize the perturbation of state at the point in a PostScript program's
% execution at which the error occurs, it is best to load this ProcSet during
% the startup job:
%	/SPR /ProcSet findresource pop
%
% As close to the site of failure as possible, preferable immediately before
% executing the failing operator, execute:
%
%	/SPR /ProcSet findresource /SPR get exec
%
% to dump the report to the back-channel or execute the following to dump the
% report to a file:
%
%	/SPR /ProcSet findresource begin
%	  variables /outputFile (myproblem.spr) put
%	  SPR
%	end
%
% Customize this ProcSet for a given product environment by setting the
% correct "scratchFilePath" in the variables dictionary. This must be a
% complete path which may be pre-pended to a filename like "PSdlist" to
% access the file. In more recent versions of CPSI the CPSI ProcSet
% contains a "scratchFilePath" variable which returns the actual path.
%

currentglobal false setglobal

<<
  /variables <<
    % Customize the following two variables for a given product/report.

    /outputFile (%stdout)	% Name of file into which report is written

    /scratchFilePath null	% Path to PSdlist, etc. files

    /CPSI /ProcSet findresource /variables known {
      /CPSI /ProcSet findresource /variables get dup
      /scratchFilePath known {
        /scratchFilePath get	% null string
	exch
      } if
      pop
    } if

    dup null eq {
      pop
      (%%[ Warning: Customize the SPR variable "scratchFilePath" ]%%\r\n) print flush
      (/tmp/)			% Customize this and remove warning message
    } if

    % Do not modify the other entries in the variables dictionary (below).

    /firstValue true		% First value in array being printed
    /indentDepth 2

    % Make a string of length one greater than the longest key to be printed

    save
    0 [ currentsystemparams currentuserparams currentpagedevice ] {
      {
        pop length dup 2 index gt {
          exch
        } if
        pop
      } forall
    } forall
    exch restore

    % guarantee a minimum of 50 characters

    2 add dup 50 lt {pop 50} if string /blankString exch

    dup length 1 sub 0 1 3 -1 roll {
      1 index exch ( ) putinterval
    } for
    dup length string /templateString exch
  >>

  /sortedforall
    % dictionary proc
  {
    2 dict begin
      /proc exch def
      /target exch def
      [
	target {
	  pop dup type /nametype eq {
	    =string cvs dup length string copy
	  } if
	} forall
      ]
      /Sort /ProcSet resourcestatus {
	pop pop /Sort /ProcSet findresource /Sort get exec
      } if
      {
	dup target exch get proc exec
      } forall
    end
  } bind

  /writetype <<
    /nametype {
      dup xcheck not {
	of (/) writestring
      } if
      =string cvs of exch writestring
    } bind

    [ /integertype /realtype /booleantype /operatortype ] {
      {
        =string cvs of exch writestring
      } bind
    } forall

    /stringtype {
      of (\() writestring of exch writestring of (\)) writestring
    } bind

    [ /arraytype /packedarraytype ] {
      {
        dup xcheck {
          (}) ({)
        } {
          (]) ([)
        } ifelse
        of exch writestring
        exch
        firstValue exch
        /firstValue true def
        {
          firstValue {
            /firstValue false def
          } {
            of ( ) writestring
          } ifelse
          writevalue
        } forall
        /firstValue exch variables 3 1 roll put
        of exch writestring
      }
    } forall

    /nulltype {
      pop of (null) writestring
    } bind

    /filetype {
      pop of (-file-) writestring
    } bind

    /dicttype {
      of (<<\n) writestring
      indentDepth		% Remember current depth on stack
      /indentDepth indentDepth 2 add def
      exch
      {
	of blankString writestring
	writekeyvalue
      } sortedforall
      /indentDepth exch def
      indent
      of blankString writestring
      of (>>) writestring
    } bind
  >>

  /indent {
    indentDepth {of ( ) writestring} repeat
  } bind

  /writevalue {
    dup type writetype exch get exec
  } bind

  /writekeyvalue {
    exch	% value name
    indent
    blankString templateString copy dup
    dup 0 (/) putinterval
    dup length 1 sub 1 exch getinterval
    3 -1 roll exch cvs pop	% Deposit name into template with blank padding
    of exch writestring
    writevalue
    of (\n) writestring
  } bind

  /writenamevalue {
    exch	% value name
    indent
    blankString templateString copy dup
    3 -1 roll exch cvs pop	% Deposit name into template with blank padding
    of exch writestring
    writevalue
    of (\n) writestring
  } bind

  /coordinate {
    exch =string cvs of exch writestring
    of ( ) writestring
    =string cvs of exch writestring
    of ( ) writestring
  } bind

  /writepath {
    {
      indent coordinate of (moveto\n) writestring
    } {
      indent coordinate of (lineto\n) writestring
    } {
      indent 6 -2 roll coordinate 4 -2 roll coordinate coordinate of (curveto\n) writestring
    } {
      indent of (closepath\n) writestring
    } pathforall
  } bind

  /writedictionary {
    {writekeyvalue} sortedforall
  } bind

  /SPR
  % -- SPR -- ; Print interpreter state information required by problem report
  {
    /SPR /ProcSet findresource begin
      variables begin
        save

	/vmStatus [vmstatus] def
	/stackDepth count 2 sub def
	/dictStackDepth countdictstack 2 sub def

        /of outputFile (w) file def

	[
	  (PostScript version: ) version (-) revision 10 string cvs
	  ( serialnumber: ) serialnumber 16 8 string cvrs (\n)
	] {
	  of exch writestring
	} forall


        of (\nSystem parameters:\n) writestring flush

        currentsystemparams writedictionary

        of (\nUser parameters:\n) writestring flush

        currentuserparams writedictionary

        of (\nPage device:\n) writestring flush

        currentpagedevice writedictionary

        of (\nHalftone:\n) writestring flush

	currenthalftone writedictionary

	of (\nTransfer functions:\n) writestring flush

	currentcolortransfer [/Black /Yellow /Magenta /Cyan] {
	  exch writenamevalue
        } forall

	of (\nBlack generation & undercolor removal:\n) writestring flush
	  (Black generation) currentblackgeneration writenamevalue
	  (Undercolor removal) currentundercolorremoval writenamevalue

        of (\nCurrent path:\n) writestring flush
          writepath
	  indent of ([End of path]\n) writestring

	of (\nCPSI Configuration flags:\n) writestring flush
	  /cp-dict /CPSI /ProcSet findresource /variables get def
	  [/emulatePSFileSystem /memoryInitialSize /memoryIncrementalSize
		/pageOverlap /scratchFilePath]
		{dup cp-dict exch get writenamevalue} forall

        of (\nOther state:\n) writestring
	  (Matrix) matrix currentmatrix writenamevalue

	  (Clip path bounding box) gsave clippath [pathbbox] grestore writenamevalue

	  (VM status) vmStatus writenamevalue
	  (Stack) stackDepth writenamevalue
	  (Dictionary stack) dictStackDepth writenamevalue

	of (\nFile state:\n) writestring

	  [ (PSdlist) (PSslist) (PScrash) (PSeerom) ] {
	    dup
	    dup length scratchFilePath length add string
	    dup 0 scratchFilePath putinterval
	    dup scratchFilePath length 4 -1 roll putinterval
	    status {pop pop exch pop}{(not available)} ifelse writenamevalue
          } forall

	  statusdict /diskstatus known {
	    (Disk status) [statusdict /diskstatus get exec] writenamevalue
	  } if

        of (\nTrueType rasterizer ) writestring
	  of
	  42 /FontType resourcestatus {
	    pop pop
	    (enabled.\n)
	  }{
	    (disabled.\n)
	  } ifelse
	  writestring flush

	/Kanji /ProcSet resourcestatus {
	  pop pop
	  globaldict /$PGFKeys known {
	    globaldict /$PGFKeys get type /dicttype eq
	  }{
	    false
	  } ifelse
	}{
	  false
	} ifelse
	{
	  (Japanese fonts are available.\n)
	}{
	  (No Japanese fonts available.\n)
	} ifelse

	of exch writestring flush
	
	of (\nHardware options:\n) writestring flush

	mark
	(*) {dup length string copy} 256 string /HWOptions resourceforall
	counttomark {
	  cvn dup /HWOptions findresource writekeyvalue
	} repeat
	cleartomark

	/CPSI /ProcSet findresource dup /engineconfiguration known {
          of (\nEngine configuration:\n) writestring
	  /engineconfiguration get exec writedictionary
	}{
	  pop
	} ifelse

	(\nNames in userdict:) [userdict {pop} forall] writenamevalue

	userdict /showpage known {
	  (\nRe-definition of showpage:) userdict /showpage get writenamevalue
	} if

	(\nNames in statusdict:) [statusdict {pop} forall] writenamevalue

        of closefile

	(SPR information written to file ") print
	  outputFile print
	  ("\n) print flush

        restore
      end
    end
  } bind
>> /SPR exch /ProcSet defineresource pop

setglobal

%%EndResource

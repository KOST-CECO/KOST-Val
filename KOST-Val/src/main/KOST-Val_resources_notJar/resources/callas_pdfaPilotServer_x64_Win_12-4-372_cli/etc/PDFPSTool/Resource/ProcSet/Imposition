%!PS-Adobe-3.0 Resource-ProcSet
%%Title: Imposition
%
% (c) Copyright 1993-1994 Adobe Systems Incorporated.
% All rights reserved.  All information contained herein is the property
% of Adobe Systems Incorporated or its Licensors, and are protected trade
% secrets and copyrights, and may be covered by U.S. and foreign patents
% or patents pending and/or mask works. Any reproduction or dissemination
% of any portion of this document or of software or other works derived
% from it is strictly forbidden unless prior written permission is
% obtained from Adobe Systems Incorporated.
%
% Patents Pending
%
% PostScript and Display PostScript are trademarks of Adobe Systems
% Incorporated which may be registered in certain jurisdictions.
%
%%EndComments

%%BeginResource: procset Imposition 1 2
%
% This procedure set implements simple imposition functionality by defining
% procedures BeginPage and EndPage which may be used with setpagedevice. When
% one physical page is filled with virtual pages, the showpage operator
% delivers the page and subsequent virtual pages are placed on the next
% physical page.
%
% For CPSI: Copy this file into a resource directory. Execute "makepsres"
%	    to add it to the resource database for CPSI or just rename the
%	    file to be "Imposition" (the same name as the ProcSet itself).
%
% Execute the following code fragment in an unencapsulated job or in the
% interpreter's startup.ps file to turn on imposition:
%
% /Imposition /ProcSet findresource /initialize get exec
%
% Set up the imposition parameters in the /variables dictionary below.
% In particular, choose the dimensions of the virtual page and the number
% of virtual pages to be fitted on the physical medium. Choose a scale factor
% for the PostScript user space within the virtual page. The defaults are set
% to impose 12 25% scale 8.5 by 11 pages on a single physical 8.5 by 11 page.
%
% Set "/outlineVirtualPage false" to prevent a thin line from being drawn
% around each virtual page. Set "/debugImposition true" to enable tracing of
% the generation of virtual and physical pages. Set "/verbose true" to report
% disposition of pages (imposed, printed).
%
% NOTE: It is fairly easy to defeat this imposition mechanism. Contrary to
% the requirements for page independence, some applications preserve graphics
% state across showpage ("gsave showpage grestore"). This will defeat the
% imposition. Similarly, PostScript programs that execute initgraphics in
% the job will defeat the imposition.
%

currentglobal true setglobal

<<
  /variables <<
    /debugImposition false	% Set true to trace BeginPage/EndPage
    /verbose true

    /outlineVirtualPage true	% Set true to draw a line around virtual pages

    1 dict begin
      /n 3 def			% No of pages in each row/column (where common)
      /s 3 def			% Scale factor for original pages

      /pagesPerRow n		% Number of virtual pages across physical page
      /pagesPerColumn n		% Number of rows of virtual pages

      /virtualWidth 612 s div	% Set virtual page width in points
      /virtualHeight 792 s div	% Set virtual page height in points

      /virtualScale 1 s div	% Set to scale for contents of imposed pages
    end

    /leftMargin 0		% Space to left of virtual page in points
    /topMargin 0		% Space above virtual page in points

    /currentRow 0		% Position of current virtual page
    /currentColumn 0

    /initialized false
    /oldBeginPage {}
    /oldEndPage {}
  >>

  /initialize
  % -- initialize -- ; Enable imposition.
  {
    /Imposition /ProcSet findresource begin
      variables begin
        initialized not {  
          currentpagedevice dup
	  /BeginPage get exch
	  /EndPage get
	  /oldEndPage exch def
	  /oldBeginPage exch def
          <<
	    /BeginPage dup load
	    /EndPage dup load
          >> setpagedevice
          /initialized true def
          (%%[ Warning: Imposition enabled ]%%\r\n) print flush
        }{
          (%%[ Warning: Imposition already enabled ]%%\r\n) print flush
        } ifelse
      end
    end
  } bind

  /finalize
  % -- finalize -- ; Disable imposition.
  {
    /Imposition /ProcSet findresource begin
      variables begin
        initialized {
          <<
            /BeginPage /oldBeginPage load
	    /EndPage /oldEndPage load
          >> setpagedevice
          /initialized false def
          (%%[ Warning: Imposition disabled ]%%\r\n) print flush
        }{
          (%%[ Warning: Imposition already disabled ]%%\r\n) print flush
        } ifelse
      end
    end
  } bind

  /ResetPage
  % -- ResetPage -- ; Assumes ProcSet and variables on dict stack
  {
    /currentRow 0 def
    /currentColumn 0 def
  } bind

  /CheckImposition
  % --CheckImposition -- ; Assumes ProcSet & variables on dict stack
  {
    currentpagedevice /PageSize get aload pop
    virtualHeight topMargin add pagesPerColumn mul lt {
      (%%[ Error: Requested rows in imposition exceed media height. ]%%\r\n)
      print flush
      stop
    } if
    virtualWidth leftMargin add pagesPerRow mul lt {
      (%%[ Error: Requested columns in imposition exceed media width. ]%%\r\n)
      print flush
      stop
    } if
  } bind

  /EstablishVirtualPage
  % -- EstablishVirtualPage -- ; assumes ProcSet and variables on dict stack
  {
    CheckImposition

    % Start with a clean slate

    initgraphics

    % Translate user origin to lower-left of virtual page

    virtualWidth leftMargin add currentColumn mul
    currentpagedevice /PageSize get 1 get
    virtualHeight topMargin add currentRow 1 add mul sub
    translate

    % Establish clip around virtual page

    0 0 virtualWidth virtualHeight rectclip

    % Apply desired scale to imposed pages

    virtualScale dup scale
  } bind

  /BeginPage
  % pageno BeginPage --
  {
    /Imposition /ProcSet findresource begin
      variables begin
        debugImposition {
          (BeginPage: ) print dup =string cvs print
          ( row: ) print currentRow =string cvs print
          ( col: ) print currentColumn =
          flush
        } if

        /pageNumber exch def

	EstablishVirtualPage
      end
    end
  } bind

  /EndPage
  % pageno reason EndPage boolean
  {
    /Imposition /ProcSet findresource begin
      variables begin
        /pageNumber 3 -1 roll def

        [
          % 0 = showpage
	  {
            debugImposition {
              (EndPage: showpage ) print pageNumber = flush
            } if

            outlineVirtualPage {
	      EstablishVirtualPage
              0 setgray		% No need for gsave/grestore in EndPage!
	      0 setlinewidth
	      clippath stroke
            } if

            % Update row/column count; reset if page filled.

            /currentColumn currentColumn 1 add def

            currentColumn pagesPerRow ge {
              /currentColumn 0 def
              /currentRow currentRow 1 add def
              currentRow pagesPerColumn ge {
                /currentRow 0 def
              } if
            } if

            % Emit page if next page is the first virtual page again
            currentRow 0 eq currentColumn 0 eq and

	    dup not {
	      verbose debugImposition or {
                (%%[ Page imposed ]%%\r\n) print flush
	      } if
            } if
	  } bind

          % 1 = copypage
          {
            (%%[ Error: copypage will not work with impositions. ]%%\r\n) print flush
            stop
          } bind

          % 2 = Device deactivation
	  {
            debugImposition {
              (EndPage: deactivation) = flush
            } if
            % Result: Emit page if some imposed pages present.
            currentColumn 0 gt currentRow 0 gt or
            ResetPage
          }
        ] exch	% [ showpage-proc copypage-proc deactivate-proc ] reason

        dup 0 lt exch dup 2 gt 3 -1 roll or {
          (%%[ Error: Invalid reason code passed to EndPage ]%%\r\n) = flush
          stop
        } if

	get exec	% Execute required EndPage action

        dup verbose debugImposition or and {
          (%%[ Page printed ]%%\r\n) print flush
        } if
      end
    end
  } bind

  /ImposeFile
  % string ImposeFile -- ; Adds the pages from the file to the imposition
  {
    /$imposition_file exch def
    clear cleardictstack
    /$imposition_save save def
    $imposition_file Run
    clear cleardictstack
    $imposition_save restore
    /Imposition /ProcSet findresource begin
      variables begin
        EstablishVirtualPage
      end
    end
  } bind

  /ImposeSubfiles
  % -- ImposeSubfiles -- ; Repeatedly reads currentfile to END_OF_FILE sentinel
  %
  % Create a single job by concatenating PostScript jobs together, separating
  % them with a line containing "END_OF_FILE". To end the sequence, append the
  % following simple job:
  %	exit
  %	END_OF_FILE
  {
    {
      clear cleardictstack
      /$imposition_save save def
      currentfile 0 (END_OF_FILE) /SubFileDecode filter cvx exec
      clear cleardictstack
      $imposition_save restore
      /Imposition /ProcSet findresource begin
        variables begin
          EstablishVirtualPage
        end
      end
    } loop
  } bind
>> /Imposition exch /ProcSet defineresource pop

setglobal

%%EndResource

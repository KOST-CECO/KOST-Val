%!PS-Adobe-3.0 Resource-ProcSet
%%BeginResource: ProcSet (CIDParams)
%%Title: (ProcSet/CIDParams)
%%Version: 3010.01
%%Copyright: ------------------------------------------------------------
%%Copyright: Copyright 1990-1998 Adobe Systems Incorporated.
%%Copyright: All rights reserved.
%%Copyright:
%%Copyright: Patents Pending
%%Copyright:
%%Copyright: NOTICE: All information contained herein is the property
%%Copyright: of Adobe Systems Incorporated. Many of the intellectual
%%Copyright: and technical concepts contained herein are proprietary
%%Copyright: to Adobe, are protected as trade secrets, and are made
%%Copyright: available only to Adobe licensees for their internal use.
%%Copyright: Any reproduction or dissemination of this software is
%%Copyright: strictly forbidden unless prior written permission is
%%Copyright: obtained from Adobe.
%%Copyright:
%%Copyright: PostScript and Display PostScript are trademarks of
%%Copyright: Adobe Systems Incorporated which may be registered in
%%Copyright: certain jurisdictions.
%%Copyright: ------------------------------------------------------------
%%EndComments
/CIDParams 10 dict dup begin/BuildCompatible{pop pop true}bind def
/SetBuildCompatible{pop}bind def/GetBuildCompatible{true}bind def 1 dict begin
/RequiresCIDRun{false exch{dup type dup/stringtype eq exch/nametype eq or{dup
/CIDFont resourcestatus{pop pop/CIDFont lib_extensions begin
lib_ResourceDeviceName end{(%cartridge)anchorsearch{pop true exit}if(%rom)
anchorsearch{pop true exit}if pop false exit}loop{(%)search{exch pop exch()eq{
dup()eq{pop pop true exit}{{cvi}stopped{pop}{pop pop true exit}ifelse}ifelse}{
pop}ifelse}{pop}ifelse}if}{pop}ifelse}{pop}ifelse}forall}bind def
/BuildCompatibleOCF{{//RequiresCIDRun exec 1183615869 internaldict/CIDRun
known not and{pop false exit}if/lib_extensions where{pop lib_extensions
/lib_forceBuildCompatible 2 copy known{get{pop true exit}if}{pop pop}ifelse}if
dup type/dicttype eq{dup/CMapName known{/CMapName get}{pop false exit}ifelse}
if dup type dup/nametype ne exch/stringtype ne and{pop false exit}if
/lib_extensions where{pop lib_extensions/lib_buildOCFCompatible 2 copy known{
get not{pop false exit}if}{pop pop}ifelse}if/BuildOCFCompatible
/FixCIDInitProcSet findresource exch 2 copy known{get}{pop pop false}ifelse
exit}loop}bind end def/SetBuildCompatibleOCF{/lib_extensions where{pop
lib_extensions begin lib_nativeMode{/lib_buildOCFCompatible exch def}{pop}
ifelse end}{pop}ifelse}bind def/GetBuildCompatibleOCF{/lib_extensions where{
pop lib_extensions/lib_buildOCFCompatible get}{true}ifelse}bind def
/SetForceBuildCompatibleOCF{/lib_extensions where{pop lib_extensions exch
/lib_forceBuildCompatible exch put}{pop}ifelse}bind def
/GetForceBuildCompatibleOCF{/lib_extensions where{pop lib_extensions
/lib_forceBuildCompatible get}{true}ifelse}bind def/IsPSFSE{lib_extensions
/lib_isPSFSE get}bind def/SetPSFSE{lib_extensions begin lib_SetPSFSE end}bind
def end/ProcSet defineresource pop
%%EndResource
%%EOF
